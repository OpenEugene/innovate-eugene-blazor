@page "/fetchAirTable"
@inject HttpClient Http

<h1>AitTable Data</h1>

<p>This component demonstrates fetching data from AirTable.</p>

@if (records == null)
{
    <p><em>Fetching...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Asset Type</th>
                <th>Address</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in records)
            {
            <tr>
                <td>@record.GetField("Name")</td>
                <td>@record.GetField("Asset Type")</td>
                <td>@record.GetField("Address")</td>
            </tr>
            }
        </tbody>
    </table>
}

@code {

    readonly string baseId = "appiPhOBADo9NMICo";
    readonly string appKey = "keyTrKPGVY60FdpzC";

    List<AirtableRecord> records = new List<AirtableRecord>();
    

     protected override async Task OnInitializedAsync()
    {
        string offset = null;
        string errorMessage = null;
       

        using (AirtableBase airtableBase = new AirtableBase(appKey, baseId))
        {
            Task<AirtableListRecordsResponse> task = airtableBase.ListRecords("Assets");
            AirtableListRecordsResponse response = await task;

            if (response.Success)
            {
                records.AddRange(response.Records.ToList());
                offset = response.Offset;
            }
            else if (response.AirtableApiError is AirtableApiException)
            {
                errorMessage = response.AirtableApiError.ErrorMessage;
            }
            else
            {
                errorMessage = "Unknown error";
            }
        }
    }
}
